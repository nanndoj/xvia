#!/bin/bash
# postinst script for xroad-center
#
# see: dh_installdeb(1)

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule
trap db_stop EXIT

abort() {
    local rc=$?
    echo -e "xroad-center: FATAL: $*" >&2
    exit $rc
}
log() { echo "xroad-center: $*" >&2; }
get_prop() { crudini --get "$1" '' "$2" 2>/dev/null || echo -n "$3"; }

handle_error() {
    ERR=$(</tmp/cert.err)
    db_subst xroad-common/cert-generation-abort ERR "$(printf %s "$ERR" | debconf-escape -e)"
    db_input critical xroad-common/cert-generation-abort
    db_go
    rm -f /tmp/cert.err
}

# setup database and run migrations
setup_database() {
    local db_properties=/etc/xroad/db.properties
    local root_properties=/etc/xroad.properties
    RET=
    db_get xroad-common/database-host || true
    local db_host="${RET:-127.0.0.1:5432}"
    local db_addr=${db_host%%:*}
    local db_port=${db_host##*:}
    crudini --set "${db_properties}" '' host "${db_addr}"
    crudini --set "${db_properties}" '' port "${db_port}"

    local db_user=$(get_prop ${db_properties} 'username' 'centerui')
    local db_schema=$(get_prop ${db_properties} 'schema' "${db_user%%@*}")
    local db_password=$(get_prop ${db_properties} 'password' 'centerui')
    local db_database=$(get_prop ${db_properties} 'database' 'centerui_production')
    local db_master_user=postgres
    export PGOPTIONS="-c client-min-messages=warning -c search_path=$db_schema,public"

    local_psql() { su -l -c "psql -qtA -p $db_port ${*@Q}" postgres; }
    remote_psql() { psql -h "$db_addr" -p "$db_port" -qtA "$@"; }

    psql_dbuser() {
        PGDATABASE="$db_database" PGUSER="$db_user" PGPASSWORD="$db_password" remote_psql "$@"
    }

    detect_bdr()  { [[ "$(psql_dbuser -c 'select bdr.bdr_version()' 2>/dev/null)" == "1.0."* ]]; }

    if [[ -f ${root_properties} && $(get_prop ${root_properties} postgres.connection.password) != "" ]]; then
        local db_master_passwd=$(get_prop ${root_properties} postgres.connection.password)
        db_master_user=$(get_prop ${root_properties} postgres.connection.user 'postgres')
        function psql_master() {
            PGDATABASE="postgres" PGPASSWORD="${db_master_passwd}" PGUSER="${db_master_user}" remote_psql "$@"
        }
    else
        function psql_master() { local_psql "$@"; }
    fi

    local db_plain_user=${db_user%%@*}
    local db_plain_master=${db_master_user%%@*}

    if PGCONNECT_TIMEOUT=5 psql_dbuser -c "\q" &>/dev/null; then
        log "Database and user exists, skipping database creation."
    else
        psql_master <<EOF || abort "Creating database '${db_database}' on '${db_host}' failed."
CREATE DATABASE "${db_database}" ENCODING 'UTF8';
REVOKE ALL ON DATABASE "${db_database}" FROM PUBLIC;
DO \$\$
BEGIN
  CREATE ROLE "${db_plain_user}" LOGIN PASSWORD '${db_password}';
  GRANT "${db_plain_user}" to "${db_plain_master}";
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'User $db_plain_user already exists';
END\$\$;
GRANT CREATE,TEMPORARY,CONNECT ON DATABASE "${db_database}" TO "${db_plain_user}";
\c "${db_database}"
CREATE EXTENSION hstore;
CREATE SCHEMA "${db_schema}" AUTHORIZATION "${db_plain_user}";
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT USAGE ON SCHEMA public to "${db_plain_user}";
EOF
    fi

    if [[ $(psql_dbuser -c "SELECT max(version) <= '20191211104400' from public.schema_migrations;" 2>/dev/null) == "t" ]]; then
        /usr/share/xroad/db/migrate-legacy.sh db:migrate || abort "Database migration failed. ABORTING."
        if ! detect_bdr; then
            psql_master --single-transaction -d "$db_database" <<EOF || abort "Renaming public schema to '$db_schema' failed."
ALTER SCHEMA public RENAME TO "${db_schema}";
ALTER SCHEMA "${db_schema}" OWNER TO "${db_plain_user}";
REVOKE ALL ON SCHEMA "${db_schema}" FROM PUBLIC;
CREATE SCHEMA public;
GRANT USAGE ON SCHEMA public TO "${db_plain_user}";
ALTER EXTENSION hstore SET SCHEMA public;
EOF
        else
            log "PostgreSQL BDR 1.0 detected, not migrating the 'public' schema."
            log "Manually migrate the 'public' schema to keep built-in database backup/restore functionality."
            log "Note. BDR 1.0 is deprecated and support will be removed in a future X-Road release."
            db_schema="public"
            crudini --set "${db_properties}" '' schema "${db_schema}"
        fi
    fi

    if [ "$db_schema" != "public" ]; then
        psql_dbuser -c "CREATE SCHEMA IF NOT EXISTS \"${db_schema}\"" || abort "Creating schema '$db_schema' failed."
    fi

    /usr/share/xroad/db/migrate.sh db:migrate || abort "Database migration failed. ABORTING."
}

# check certificates and request necessary subject information from the user
create_certificates() {
    HOST=$(hostname -f)
    LIST=
    for i in $(ip addr | grep 'scope global' | tr '/' ' ' | awk '{print $2}'); do
        LIST+="IP:$i,"
    done
    ALT=${LIST}DNS:$(hostname),DNS:$(hostname -f)

    while :; do
        if [[ ! -r /etc/xroad/ssl/nginx.crt || ! -r /etc/xroad/ssl/nginx.key ]]; then
            log "Generating new nginx.[crt|key] files "
            db_subst xroad-common/admin-subject HOST "$HOST"
            db_subst xroad-common/admin-altsubject ALT "$ALT"
            RET=
            db_get xroad-common/admin-subject
            if [ -z "$RET" ]; then
                db_set xroad-common/admin-subject "/CN=$HOST"
            fi
            RET=
            db_get xroad-common/admin-altsubject
            if [ -z "$RET" ]; then
                db_set xroad-common/admin-altsubject "$ALT"
            fi
            db_input critical xroad-common/admin-subject || true
            db_input critical xroad-common/admin-altsubject || true
            db_go
            RET=
            db_get xroad-common/admin-subject
            subj="$RET"
            RET=
            db_get xroad-common/admin-altsubject
            altn="$RET"
            db_go
            rm -f /etc/xroad/ssl/nginx.crt /etc/xroad/ssl/nginx.key
            log "generating new webUI TLS key/certificate with $subj and $altn"
            /usr/share/xroad/scripts/generate_certificate.sh -n nginx -s "${subj}" -a "${altn}" 2>/tmp/cert.err || handle_error
        else
            break
        fi
    done

    while :; do
        if [[ ! -r /etc/xroad/ssl/internal.crt || ! -r /etc/xroad/ssl/internal.key || ! -r /etc/xroad/ssl/internal.p12 ]]; then
            log "Generating new internal.[crt|key|p12] files "
            db_subst xroad-common/service-subject HOST "$HOST"
            db_subst xroad-common/service-altsubject ALT "$ALT"
            RET=
            db_get xroad-common/service-subject
            if [ -z "$RET" ]; then
                db_set xroad-common/service-subject "/CN=$HOST"
            fi
            RET=
            db_get xroad-common/service-altsubject
            if [ -z "$RET" ]; then
                db_set xroad-common/service-altsubject "$ALT"
            fi
            db_input critical xroad-common/service-subject || true
            db_input critical xroad-common/service-altsubject || true
            db_go
            RET=
            db_get xroad-common/service-subject
            subj="$RET"
            RET=
            db_get xroad-common/service-altsubject
            altn="$RET"
            db_go
            rm -f /etc/xroad/ssl/internal.crt /etc/xroad/ssl/internal.key /etc/xroad/ssl/internal.p12
            log "generating new service TLS key/certificate with $subj and $altn"
            /usr/share/xroad/scripts/generate_certificate.sh -n internal -s "${subj}" -a "${altn}" -p 2>/tmp/cert.err || handle_error
        else
            break
        fi
    done
}

case "$1" in
configure | reconfigure)
    create_certificates
    setup_database

    RET=""
    db_get xroad-common/username
    AUSER="$RET"

    #add groups
    groups="xroad-security-officer xroad-system-administrator xroad-registration-officer"
    usergroups=" $(id -Gn "$AUSER") "
    for groupname in $groups; do
        if ! getent group "$groupname" >/dev/null; then
            groupadd --system "$groupname" || true
        fi
        if [[ $usergroups != *" $groupname "* ]]; then
            usermod -a -G "$groupname" "$AUSER" || true
        fi
    done

    chmod 755 /var/lib/xroad/public
    chown xroad:xroad /var/lib/xroad/public

    test -d /var/cache/xroad && test -w /var/cache/xroad || mkdir /var/cache/xroad
    chown xroad:xroad /var/cache/xroad
    test -d /etc/xroad/configuration-parts || mkdir /etc/xroad/configuration-parts
    chown xroad:xroad /etc/xroad/configuration-parts

    mkdir -p /var/lib/xroad/import
    chmod 755 /var/lib/xroad/import
    chown xroad:xroad /var/lib/xroad/import
    ;;

abort-upgrade | abort-remove | abort-deconfigure) ;;

\
    *)
    log "postinst called with unknown argument \`$1'" >&2
    exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.
#DEBHELPER#

service rsyslog restart
service xroad-jetty restart
service xroad-signer restart
service nginx restart

exit 0
