#!/bin/bash
set -e
. /usr/share/debconf/confmodule

#add groups
groups="xroad-security-officer xroad-registration-officer xroad-service-administrator xroad-system-administrator xroad-securityserver-observer"

#define groups that are allowed on ss-cluster slaves
slave_groups="xroad-securityserver-observer"

die () {
    echo >&2 "$@"
    exit 1
}

log () {
    echo >&2 "$@"
}

#parameters:
#1 file_path
#2 old_section
#3 old_key
#4 new_section
#5 new_key
function migrate_conf_value {
    MIGRATION_VALUE="$(crudini --get "$1" "$2" "$3" 2>/dev/null || true)"
    if [ "${MIGRATION_VALUE}" ];
        then
            crudini --set "$1" "$4" "$5" "${MIGRATION_VALUE}"
            crudini --del "$1" "$2" "$3"
    fi
}

get_prop() {
  crudini --get "$1" '' "$2" 2>/dev/null || echo -n "$3"
}

setup_database() {
    
    node_type=$(crudini --get '/etc/xroad/conf.d/node.ini' node type 2>/dev/null || echo standalone)
    if [[ "$node_type" == "slave" ]]; then
      log "Skipping database setup on cluster slave node"
      return 0
    fi

    local db_properties=/etc/xroad/db.properties
    local root_properties=/etc/xroad.properties

    RET=
    db_get xroad-common/database-host || true
    local db_host="${RET:-127.0.0.1:5432}"

    local tmp_password="$(head -c 24 /dev/urandom | base64 | tr "/+" "_-")"
    local db_user=$(get_prop ${db_properties} 'serverconf.hibernate.connection.username' 'serverconf')
    local db_schema="${db_user%%@*}"
    local db_password=$(get_prop ${db_properties} 'serverconf.hibernate.connection.password' "$tmp_password")
    local db_url=$(get_prop ${db_properties} 'serverconf.hibernate.connection.url' "jdbc:postgresql://$db_host/serverconf")
    local db_master_user=$(get_prop ${root_properties} postgres.connection.user 'postgres')
    local db_database=serverconf
    local db_options=""

    export PGOPTIONS="-c client-min-messages=warning -c search_path=$db_schema,public"

    pat='^jdbc:postgresql://([^/]*)($|/([^\?]*)(.*)$)'
    if [[ "$db_url" =~ $pat ]]; then
      db_host=${BASH_REMATCH[1]:-$db_host}
      #match 2 unused
      db_database=${BASH_REMATCH[3]:-serverconf}
      db_options="${BASH_REMATCH[4]}"
    else
      log "Unable to parse '$db_url', using 'jdbc:postgresql://$db_host/$db_database'"
    fi

    local hosts
    IFS=',' read -ra hosts <<<"$db_host"
    local db_addr=${hosts[0]%%:*}
    local db_port=${hosts[0]##*:}

    local_psql() { su -l -c "psql -qtA -p ${db_port:-5432} ${*@Q}" postgres; }
    remote_psql() { psql -h "${db_addr:-127.0.0.1}" -p "${db_port:-5432}" -qtA "$@"; }

    if [[ -f ${root_properties} && $(get_prop ${root_properties} postgres.connection.password) != "" ]]; then
        local db_master_passwd=$(get_prop ${root_properties} postgres.connection.password)
        function psql_master() {
            PGPASSWORD="${db_master_passwd}" PGUSER="${db_master_user}" remote_psql "$@"
        }
    else
        function psql_master() { local_psql "$@"; }
    fi

    local db_plain_user=${db_user%%@*}
    local db_plain_master=${db_master_user%%@*}

    psql_dbuser() {
        PGDATABASE="${db_database}" PGUSER="${db_user}" PGPASSWORD="${db_password}" remote_psql "$@"
    }

    if PGCONNECT_TIMEOUT=5 psql_dbuser -c "\q" &>/dev/null; then
        log "Database and user exists, skipping database creation."
    else
        psql_master -d postgres <<EOF || die "Creating database '${db_database}' on '${db_host}' failed."
CREATE DATABASE "${db_database}" ENCODING 'UTF8';
REVOKE ALL ON DATABASE "${db_database}" FROM PUBLIC;
DO \$\$
BEGIN
  CREATE ROLE "${db_plain_user}" LOGIN PASSWORD '${db_password}';
  GRANT "${db_plain_user}" to "${db_plain_master}";
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'User $db_plain_user already exists';
END\$\$;
GRANT CREATE,TEMPORARY,CONNECT ON DATABASE "${db_database}" TO "${db_plain_user}";
\c "${db_database}"
CREATE EXTENSION hstore;
CREATE SCHEMA "${db_schema}" AUTHORIZATION "${db_plain_user}";
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT USAGE ON SCHEMA public to "${db_plain_user}";
EOF
    fi

    touch ${db_properties}
    chown xroad:xroad ${db_properties}
    chmod 640 ${db_properties}

    crudini --set ${db_properties} '' serverconf.hibernate.jdbc.use_streams_for_binary true
    crudini --set ${db_properties} '' serverconf.hibernate.dialect ee.ria.xroad.common.db.CustomPostgreSQLDialect
    crudini --set ${db_properties} '' serverconf.hibernate.connection.driver_class org.postgresql.Driver
    crudini --set ${db_properties} '' serverconf.hibernate.connection.url "jdbc:postgresql://$db_host/$db_database$db_options"
    crudini --set ${db_properties} '' serverconf.hibernate.connection.username "${db_user}"
    crudini --set ${db_properties} '' serverconf.hibernate.connection.password "${db_password}"

    if [[ $(psql_dbuser -c "select 1 from pg_tables where schemaname = 'public' and tablename='databasechangelog'" 2>/dev/null) == 1 ]]; then

      cd /usr/share/xroad/db/
      /usr/share/xroad/db/liquibase.sh --classpath=/usr/share/xroad/jlib/proxy.jar --url="jdbc:postgresql://$db_host/$db_database?dialect=ee.ria.xroad.common.db.CustomPostgreSQLDialect" --changeLogFile=/usr/share/xroad/db/serverconf-legacy-changelog.xml --password="${db_password}" --username="${db_user}" update || die "Connection to database has failed, please check database availability and configuration in ${db_properties} file"
        psql_master --single-transaction -d "$db_database" <<EOF || die "Renaming public schema to '$db_schema' failed."
\set STOP_ON_ERROR on
ALTER DATABASE "${db_database}" OWNER TO "${db_plain_master}";
REVOKE ALL ON DATABASE "${db_database}" FROM PUBLIC;
GRANT CREATE,TEMPORARY,CONNECT ON DATABASE "${db_database}" TO "${db_plain_user}";
ALTER SCHEMA public RENAME TO "${db_schema}";
ALTER SCHEMA "${db_schema}" OWNER TO "${db_plain_user}";
REVOKE ALL ON SCHEMA "${db_schema}" FROM PUBLIC;
CREATE SCHEMA public;
GRANT USAGE ON SCHEMA public TO "${db_plain_user}";
ALTER EXTENSION hstore SET SCHEMA public;
EOF
    fi

    if [ "$db_schema" != "public" ]; then
        psql_dbuser -c "CREATE SCHEMA IF NOT EXISTS \"${db_schema}\"" || die "Creating schema '$db_schema' failed."
    fi

    cd /usr/share/xroad/db/
    /usr/share/xroad/db/liquibase.sh --classpath=/usr/share/xroad/jlib/proxy.jar --url="jdbc:postgresql://$db_host/$db_database?dialect=ee.ria.xroad.common.db.CustomPostgreSQLDialect" --changeLogFile=/usr/share/xroad/db/serverconf-changelog.xml --defaultSchemaName="$db_schema" --password="${db_password}" --username="${db_user}"  update || die "Connection to database has failed, please check database availability and configuration in ${db_properties} file"

}

case "$1" in
 configure)
  chmod 0440 /etc/sudoers.d/xroad-proxy
  chown xroad:xroad /etc/xroad/backup.d/??_xroad-proxy
  chmod 0440 /etc/xroad/backup.d/??_xroad-proxy

  mkdir -p /var/spool/xroad; chown xroad:xroad /var/spool/xroad
  mkdir -p /var/cache/xroad; chown xroad:xroad /var/cache/xroad
  mkdir -p /etc/xroad/globalconf; chown xroad:xroad  /etc/xroad/globalconf
  chown -h xroad:xroad /etc/xroad/conf.d/jetty-logback-context-name.xml

  test -e /etc/nginx/sites-enabled/clientproxy && rm /etc/nginx/sites-enabled/clientproxy
  test -e /etc/nginx/sites-enabled/clientproxy-ssl && rm /etc/nginx/sites-enabled/clientproxy-ssl

  setup_database

  RET=""
  db_get xroad-common/username
  AUSER="$RET"

  groupnames=""
  if [[ "$node_type" == "slave" ]]; then
      log "Cluster slave node detected, configuring slave compatible groups"
      groupnames=$slave_groups
  else
      log "Configuring groups"
      groupnames=$groups
  fi

  usergroups=" $(id -Gn "$AUSER") "
  for groupname in $groupnames; do
      if ! getent group "$groupname" > /dev/null; then
          groupadd --system "$groupname" || true
      fi
      if [[ $usergroups != *" $groupname "* ]]; then
          usermod -a -G "$groupname" "$AUSER" || true
      fi
  done

  #migrating possible local configuration for modified configuration values (for version 6.17.0)
  migrate_conf_value /etc/xroad/conf.d/local.ini proxy ocsp-cache-path signer ocsp-cache-path
  migrate_conf_value /etc/xroad/conf.d/local.ini proxy enforce-token-pin-policy signer enforce-token-pin-policy

  db_stop

  service rsyslog restart || true
  service nginx restart || true
  service xroad-confclient restart || true
  service xroad-jetty restart || true
  service xroad-signer restart || true
 ;;

 abort-upgrade|abort-remove|abort-deconfigure)
 ;;

 *)
    log "postinst called with unknown argument \`$1'" >&2
    exit 1
 ;;
esac

#DEBHELPER#
exit 0
